name: Terraform CI/CD

on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.YC_S3_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_S3_SECRET_KEY }}
  AWS_DEFAULT_REGION: ru-central1
  YC_TOKEN: ${{ secrets.YC_TOKEN }}
  YC_CLOUD_ID: ${{ secrets.YC_CLOUD_ID }}
  YC_FOLDER_ID: ${{ secrets.YC_FOLDER_ID }}
  TERRAFORM_SA_ID: ${{ secrets.TERRAFORM_SA_ID }}
  IMAGE_REPOSITORY: ${{ secrets.IMAGE_REPOSITORY }}

jobs:
  #  Подготовка сетей, k8s кластера + VM
  infra:
    name: Deploy Infra
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4

      - name: Terraform Init
        working-directory: diploma_project/infra
        run: terraform init

      - name: Install YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "${HOME}/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Configure YC CLI
        run: |
          yc config set token ${{ secrets.YC_TOKEN }}
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}  

      - name: Create Service Account Key
        run: |
          mkdir -p diploma_project/infra/bootstrap
          yc iam key create \
            --service-account-id $TERRAFORM_SA_ID \
            --output diploma_project/infra/bootstrap/sa-key.json  

      - name: Terraform Apply
        working-directory: diploma_project/infra
        run: terraform apply -var "token=$YC_TOKEN" -var "cloud_id=$YC_CLOUD_ID" -var "folder_id=$YC_FOLDER_ID" -var "terraform_sa_id=$TERRAFORM_SA_ID" -auto-approve
#  #  Настройка ingress контроллера + конфига для k8s
  build-and-push-image:
    name: Build & Push Docker Image
    needs: infra
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-image-tag.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17
          cache: maven

      - name: Build JAR with Maven
        working-directory: diploma_project/app
        run: mvn -B clean package -DskipTests

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Yandex Container Registry
        run: echo $YC_TOKEN | docker login --username oauth --password-stdin cr.yandex

      - name: Build & Push Docker Image
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t $IMAGE_REPOSITORY:$IMAGE_TAG ./diploma_project/app
          docker push $IMAGE_REPOSITORY:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Set IMAGE_TAG output
        id: set-image-tag
        run: echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT


  install-artifacts:
    name: Install environment to cluster
    runs-on: ubuntu-latest
    needs: build-and-push-image
    env:
      TF_VAR_path_to_config: ${{ github.workspace }}/.kube/config
      TF_VAR_image_repository: ${{ secrets.IMAGE_REPOSITORY }}
      TF_VAR_image_tag: ${{ needs.build-and-push-image.outputs.image_tag }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install YC CLI
        run: |
          curl -sSL https://storage.yandexcloud.net/yandexcloud-yc/install.sh | bash
          echo "${HOME}/yandex-cloud/bin" >> $GITHUB_PATH

      - name: Configure YC CLI
        run: |
          yc config set token ${{ secrets.YC_TOKEN }}
          yc config set cloud-id ${{ secrets.YC_CLOUD_ID }}
          yc config set folder-id ${{ secrets.YC_FOLDER_ID }}

      - name: Get kubeconfig
        run: yc managed-kubernetes cluster get-credentials my-k8s-cluster --external --force

      - name: Upload kubeconfig
        uses: actions/upload-artifact@v4
        with:
          name: kubeconfig
          path: ~/.kube/config

      - name: Install ingress-nginx
        run: |
          helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          helm repo update
          kubectl create namespace ingress-nginx || true
          helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx -n ingress-nginx \
            --set controller.replicaCount=2 \
            --set controller.nodeSelector."kubernetes\.io/os"=linux \
            --set defaultBackend.nodeSelector."kubernetes\.io/os"=linux

      - name: Download kubeconfig
        uses: actions/download-artifact@v4
        with:
          name: kubeconfig
          path: ${{ github.workspace }}/.kube

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4

      - name: Delete old Helm release
        run: |
          helm uninstall java-app -n my-app || true    

      - name: Deploy Apps with Terraform
        working-directory: diploma_project/terraform-deploy
        run: |
          terraform init
          terraform apply -auto-approve